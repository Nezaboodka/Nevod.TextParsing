/*
	This file was generated by "scripts/TablesGenerator.py", do not edit directly.
*/

namespace WordExtraction
{
    enum SymbolType
    {        
/* %types% */
    }

    static class SymbolTable
    {
        private static readonly SymbolTypeInfo[] SYMBOL_TYPES_INFO = { /* %types_info% */ };

        private struct SymbolTypeInfo
        {
            public char lowBound;
            public char highBound;
            public SymbolType symbolType;

            public SymbolTypeInfo(char lowBound, char highBound, SymbolType symbolType)
            {
                this.lowBound = lowBound;
                this.highBound = highBound;
                this.symbolType = symbolType;
            }
        }

        private static int InRange(char c, SymbolTypeInfo symbolTypeInfo)
        {
            int result;

            if ((symbolTypeInfo.lowBound <= c) && (c <= symbolTypeInfo.highBound))
                result = 0;
            else if (symbolTypeInfo.highBound < c)
                result = 1;
            else
                result = -1;

            return result;
        }

        public static SymbolType GetSymbolType(char c)
        {
            SymbolType result = SymbolType.ST_ANY;

            int beginIndex = 0, endIndex = SYMBOL_TYPES_INFO.Length;
            bool isFound = false;

            while ((beginIndex <= endIndex) && !isFound)
            {
                int i = (beginIndex + endIndex) / 2;
                int comparisonResult = InRange(c, SYMBOL_TYPES_INFO[i]);

                if (comparisonResult == 0)
                {
                    result = SYMBOL_TYPES_INFO[i].symbolType;
                    isFound = true;
                }
                else if (comparisonResult < 0)
                    endIndex = i - 1;
                else
                    beginIndex = i + 1;
            }

            return result;
        }

    }
}